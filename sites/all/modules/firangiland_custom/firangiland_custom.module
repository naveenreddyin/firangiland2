<?php

/**
 * Implements hook_init()
 * Use it for following in this module:
 * 1. To insert taxonomy for food menu
 */

function firangiland_custom_init(){

  // $row = 1;
  // if (($handle = fopen(drupal_get_path('module', 'firangiland_custom') . "/includes/food_menu.csv", "r")) !== FALSE) {

  //     while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
  //         $num = count($data);
  //         $row++;
  //           for ($c=0; $c < $num; $c++) {
  //               // echo $data[$c] . "<br />\n";

  //               taxonomy_term_save((object) array(
  //                 'name' =>  $data[$c],
  //                 'vid' => '3',
  //               ));
  //             }
  //         }
  //     fclose($handle);
  // }
  // below code is to delete all the terms 
  // $vocabulary = taxonomy_vocabulary_machine_name_load('main_menu');
  //   foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
  //     taxonomy_term_delete($term->tid);
  //   }

}



/**
 * Implements hook_form_alter().
 *
 * Hide average fivestar field from review edit/create form.
 */
function firangiland_custom_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'review_for_restaurant_node_form') {
    // Hide average field, this field is calculated upon node_presave.
    $form['field_overall_average']['#access'] = FALSE;
  }


}


/**
 * Implements hook_node_presave().
 *
 * Calculates average vote rating.
 */
function firangiland_custom_node_presave($node) {
// global $user;
// dsm($user);
// so we can get $user->uid;
// dpm($node->nid);
  if ($node->type == 'review_for_restaurant') {
    // Get values from 3 axis.
    $vote_food     = entity_metadata_wrapper('node', $node)->field_food->value();
    $vote_ambience      = entity_metadata_wrapper('node', $node)->field_ambience->value();

    // Calculate and set average axe.
    $votes_average      = ($vote_food + $vote_ambience) / 2;
    // @info: Can't use entity_metadata_wrapper, because '->set' not supported on this field.
    //entity_metadata_wrapper('node', $node)->field_overall_average->set($votes_average);
    $node->field_overall_average['und'][0]['rating'] = $votes_average;  


    // $params = array(
    //     'firangiland_custom_user_votes_status_uid' => $node->uid,
    //     'firangiland_custom_user_votes_status_review_nid' => entity_metadata_wrapper('node', $node)->nid,
    //   );
    // drupal_write_record('firangiland_custom_user_votes_status', $params);

  }
}

function firangiland_custom_node_insert($node){
global $user, $language;
  dpm($node);
  if ($node->type == 'review_for_restaurant') {
    $params = array(
        'firangiland_custom_user_votes_status_uid' => $node->uid,
        'firangiland_custom_user_votes_status_review_nid' => $node->nid,
        'firangiland_custom_user_votes_status_restaurant_nid' => $node->field_restaurant_rating['und'][0]['nid'],
        'firangiland_custom_user_votes_status_date' => REQUEST_TIME,
      );
    drupal_write_record('firangiland_custom_user_votes_status', $params);
  }


  if($node->type == 'restaurant'){

      if(count($node->field_others['und']) > 0){
          dpm($node);
          $value = $node->field_others['und'][0]['value'];
            $params = array(
              'fc_others_menu_data' => $value, 
              'fc_others_menu_nid' => $node->nid,
              );

            drupal_write_record('fc_others_menu', $params);

            $values['sender'] = clone $user;
            $values['sender']->name = 'Site admin';
            $from_email = variable_get('site_mail', '');
            $to = $from_email;
            $values['sender']->mail = $from_email;

            drupal_mail('Admin notification', 'page_autoreply', $from_email, $language, $values, $to);

            _firangiland_custom_create_admin_notification_node($value, $language);

      }

  }
}


function _firangiland_custom_create_admin_notification_node($data, $language){

    $values = array(
  'type' => 'admin_notification',
  'uid' => 1,
  'status' => 1,
  'comment' => 1,
  'promote' => 0,
);
$entity = entity_create('node', $values);

// The entity is now created, but we have not yet simplified use of it.
// Now create an entity_metadata_wrapper around the new node entity
// to make getting and setting values easier
$ewrapper = entity_metadata_wrapper('node', $entity);

// Using the wrapper, we do not have to worry about telling Drupal
// what language we are using. The Entity API handles that for us.
$ewrapper->title->set('New Menu added');

// Setting the body is a bit different from other properties or fields
// because the body can have both its complete value and its
// summary
$my_body_content = $data;
$ewrapper->body->set(array('value' => $my_body_content));
$ewrapper->body->summary->set($data);

// Setting the value of an entity reference field only requires passing
// the entity id (e.g., nid) of the entity to which you want to refer
// The nid 15 here is just an example.
// Note that the entity id (e.g., nid) must be passed as an integer not a
// string


// Now just save the wrapper and the entity
// There is some suggestion that the 'true' argument is necessary to
// the entity save method to circumvent a bug in Entity API. If there is
// such a bug, it almost certainly will get fixed, so make sure to check.
$ewrapper->save();
}


/**
 * implements hook_menu_alter()
 */
function firangiland_custom_menu_alter(&$items) {
  // $items['user']['type'] = MENU_CALLBACK;
  $items['user/simple-fb-connect']['type'] = MENU_CALLBACK;
  // $items['user/password']['type'] = MENU_CALLBACK;
}

/**
 * Implements custom function to check if the user has already reviewed the node or not.
 */

function firangiland_custom_check_if_user_has_reviewed(){
  global $user;

  // dpm($user);
  if ($node = menu_get_object()) {
  // Get the nid
  $nid = $node->nid;
  }

  if(!user_is_logged_in())
    return FALSE;

  $query = db_select('firangiland_custom_user_votes_status', 'cr')
  ->fields('cr')
  ->condition('firangiland_custom_user_votes_status_uid', $user->uid, '=')
  ->condition('firangiland_custom_user_votes_status_restaurant_nid', $nid, '=')
  ->execute()
  ->fetchAssoc();

  dpm($query);

  if($query)
    return $query;
  else
    return FALSE;
}

